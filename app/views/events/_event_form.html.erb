<%= render partial: 'time_picker' %>
<%= render partial: 'word_length' %>

<label for="event_title">What:</label>
<div class="mb-3" >
  <%= f.text_field :title, class: "form-control", placeholder: "Title of the event" %>
  <p class="form-text">What the event will go by in the WWW guide</p>
</div>

<div class="mb-3" >
  <div style="color: #737373; margin-bottom: 3px;">
    <span id="discription-length"></span>
    <span id="discription-comment"></span>
  </div>
  <%= f.text_area :event_description, class: "form-control", placeholder: "Description", rows: "5" %>
  <p class="form-text">Brief description of the event, workshop, or performance</p>
</div>

<div class="mb-3" >
  <div class="row">
    <div class="col-6 mt-2">
      <div class="form-check">
        <%= f.check_box :alcohol, class: "form-check-input", id: "event_alcohol" %>
        <label class="form-check-label" for="event_alcohol" data-bs-toggle="tooltip" title="Offering drinks that aren't sober at all.">
          Alcohol Served <a href="#_">?</a> (21+)
        </label>
      </div>
    </div>
    <div class="col-6 mt-2">
      <div class="form-check">
        <%= f.check_box :crafting, class: "form-check-input", id: "event_crafting" %>
        <label class="form-check-label" for="event_crafting" data-bs-toggle="tooltip" title="Dream, build, create, contribute, and maybe take some art.">
          Crafting <a href="#_">?</a>
        </label>
      </div>
    </div>
    <div class="col-6 mt-2">
      <div class="form-check">
        <%= f.check_box :red_light, class: "form-check-input", id: "event_red_light" %>
        <label class="form-check-label" for="event_red_light" data-bs-toggle="tooltip" title="Nudity, sexuality, and similarly sinful adult themes.">
          Explicit <a href="#_">?</a> (18+)
        </label>
      </div>
    </div>
    <div class="col-6 mt-2">
      <div class="form-check">
        <%= f.check_box :fire_art, class: "form-check-input", id: "event_fire_art" %>
        <label class="form-check-label" for="event_fire_art" data-bs-toggle="tooltip" title="Poofers, flow performance, and fire!  FIRE!">
          Fire Art Performances <a href="#_">?</a>
        </label>
      </div>
    </div>
    <div class="col-6 mt-2">
      <div class="form-check">
        <%= f.check_box :food, class: "form-check-input", id: "event_food" %>
        <label class="form-check-label" for="event_food" data-bs-toggle="tooltip" title="Offering food, whether snacks or meals, sober or otherwise.">
          Food <a href="#_">?</a>
        </label>
      </div>
    </div>
    <div class="col-6 mt-2">
      <div class="form-check">
        <%= f.check_box :sober, class: "form-check-input", id: "event_sober" %>
        <label class="form-check-label" for="event_sober" data-bs-toggle="tooltip" title="Offering food or drinks for those who want to be 100% sober.">
          Sober <a href="#_">?</a>
        </label>
      </div>
    </div>
    <div class="col-6 mt-2">
      <div class="form-check">
        <%= f.check_box :spectacle, class: "form-check-input", id: "event_spectacle" %>
        <label class="form-check-label" for="event_spectacle" data-bs-toggle="tooltip" title="See a show (and in some cases be a performer).">
          Spectacle <a href="#_">?</a>
        </label>
      </div>
    </div>
  </div>

  <p class="form-text">Are any of the above happening at your event?</p>
</div>

<label for="event_hosting_location">Where:</label>
<div class="mb-3" >
  <p class="form-text">Where would someone go if they wanted to participate in this event?</p>
  <div class="form-check">
    <%= f.radio_button :where, "camp", class: "form-check-input", id: "event_where_radio_camp" %>
    <label class="form-check-label" for="event_where_radio_camp">
      Our camp
    </label>
  </div>
  <div class="form-check">
    <%= f.radio_button :where, "location", class: "form-check-input", id: "event_where_location_val" %>
    <label class="form-check-label" for="event_where_location_val">
      A location around the lake
    </label>
  </div>
  <div class="form-check">
    <%= f.radio_button :where, "multiple_locations", class: "form-check-input", id: "event_where_multiple_locations" %>
    <label class="form-check-label" for="event_where_multiple_locations">
      At non-specific locations
    </label>
  </div>
</div>

<div id="where_camp_event" class="mb-3" style="">
  <div class="mb-3 position-relative">
    <%= f.text_field :where_camp, id: "event_where_camp_input", class: "form-control", placeholder: "Type to search or enter new camp", autocomplete: "off" %>
    <%= f.hidden_field :where_camp_id, id: "event_where_camp_id_input" %>
    <div id="where_camp_autocomplete_list" class="list-group position-absolute w-100" style="z-index: 1000; display: none;">
      <%# Autocomplete suggestions will be populated here by JavaScript %>
    </div>
    <p class="form-text">Select an existing camp or type a new camp name. If new, it will be created.</p>
  </div>
</div>

<div id="where_location_event" class="mb-3" style="display:none;">
  <div class="mb-3 position-relative">
    <%= f.text_field :where_location, id: "event_where_location_input", class: "form-control", placeholder: "Type to search or enter new location", autocomplete: "off" %>
    <%= f.hidden_field :where_location_id, id: "event_where_location_id_input" %>
    <div id="where_location_autocomplete_list" class="list-group position-absolute w-100" style="z-index: 1000; display: none;">
      <%# Autocomplete suggestions will be populated here by JavaScript %>
    </div>
    <p class="form-text">Eg: an Art Installation, the Nexus, the Effigy, etc.</p>
  </div>
</div>

<div id="where_imprecise_event" class="mb-3" style="display:none;">
  <div class="mb-3 position-relative">
    <%= f.text_field :where_imprecise, id: "event_where_imprecise_input", class: "form-control", placeholder: "Type to search or enter new non-specific location", autocomplete: "off" %>
    <div id="where_imprecise_autocomplete_list" class="list-group position-absolute w-100" style="z-index: 1000; display: none;">
      <%# Autocomplete suggestions will be populated here by JavaScript %>
    </div>
    <p class="form-text">Eg: in the water, from A to B, where the music is Bumping!</p>
  </div>
</div>

<label for="event_event_recurrence">Who:</label>
<div class="mb-3" >
  <p class="form-text">Who is orchestrating this event?</p>
  <div class="form-check">
    <%= f.radio_button :who, "camp", class: "form-check-input", id: "event_who_radio_camp" %>
    <label class="form-check-label" for="event_who_radio_camp">
      My camp
    </label>
  </div>
  <div class="form-check">
    <%= f.radio_button :who, "just_me", class: "form-check-input", id: "event_who_just_me" %>
    <label class="form-check-label" for="event_who_just_me">
      Just me
    </label>
  </div>
  <div class="form-check">
    <%= f.radio_button :who, "lakes_of_fire", class: "form-check-input", id: "event_who_lakes_of_fire" %>
    <label class="form-check-label" for="event_who_lakes_of_fire">
      A group or department within Lakes of Fire
    </label>
  </div>
</div>

<div id="who_camp_event" class="mb-3" style="display:none;">
  <div class="mb-3 position-relative" >
    <%= f.text_field :who_camp, id: "event_who_camp_input", class: "form-control", placeholder: "Type to search or enter new camp", autocomplete: "off" %>
    <%= f.hidden_field :hosting_camp_id, id: "event_hosting_camp_id_input" %>
    <div id="who_camp_autocomplete_list" class="list-group position-absolute w-100" style="z-index: 1000; display: none;">
      <%# Autocomplete suggestions will be populated here by JavaScript %>
    </div>
    <p class="form-text">Select an existing camp or type a new camp name. If new, it will be created.</p>
  </div>
</div>

<div id="who_lakes_of_fire_event" class="mb-3" style="display:none;">
  <div class="mb-3 position-relative" >
    <%= f.collection_select :department_id, Department.order(:name), :id, :name, { include_blank: 'Select a Department' }, { class: 'form-select form-control', id: "event_department_id_input" } %>
    <div id="who_department_autocomplete_list" class="list-group position-absolute w-100" style="z-index: 1000; display: none;">
      <%# Autocomplete suggestions will be populated here by JavaScript %>
    </div>

    <p class="form-text">Eg: FAST, The ECs, Greeters, P-Ninjas, etc.</p>
  </div>
</div>

<label for="event_main_contact_person">Contact Person: <small style="color: #999;">(contact info won't be published)</small></label>
<div class="mb-3" >
  <%= f.text_field :main_contact_person, class: "form-control", placeholder: "Name of Main Contact Person" %>
</div>
<div class="mb-3" >
  <%= f.text_field :contact_person_email, class: "form-control", placeholder: "Email" %>
  <p class="form-text">Email</p>
</div>

<label for="event_event_recurrence">When:</label>
<div class="mb-3" >
  <p class="form-text">Does this event happen on multiple occasions or dates? or happen only once?</p>
  <div class="form-check">
    <%= f.radio_button :event_recurrence, "single", class: "form-check-input", id: "event_event_recurrence_single_val" %>
    <label class="form-check-label" for="event_event_recurrence_single_val">
      This event happens once
    </label>
  </div>
  <div class="form-check">
    <%= f.radio_button :event_recurrence, "multiple", class: "form-check-input", id: "event_event_recurrence_multiple_val" %>
    <label class="form-check-label" for="event_event_recurrence_multiple_val">
      This event happens multiple times
    </label>
  </div>
</div>

<div id="single_occurrance_event" class="mb-3 event_time_inputs" style="display:none;">
  <%= f.fields_for :single_event_time do |event_time_form| %>
    <div class="row">
      <div class="col-4">
        <%= event_time_form.select  :day_of_week,
                                    days_of_week_select_options,
                                    {:selected => event_time_form.object.day_of_week},
                                    {:class => "form-control day_of_week_input"} %>
      </div>
      <!-- render these nicely so jquery can pick them up -->
      <div class="col-4">
        <%= event_time_form.text_field  :starting,
                                        class: "form-control time start",
                                        placeholder: "Starting time",
                                        date_pair_value: event_time_form.object.start_time %>

        <div class="form-check mt-1">
          <input type="checkbox" class="all_day_event form-check-input" value="value" id="single_all_day_event">
          <label class="form-check-label" for="single_all_day_event">All Day</label>
        </div>
      </div>
      <div class="col-4">
        <%= event_time_form.text_field  :ending,
                                        class: "form-control time end",
                                          placeholder: "Ending time",
                                          date_pair_value: event_time_form.object.end_time %>
      </div>
    </div>
  <% end %>
</div>

<div class="" id="multiple_occurrance_event" style="display:none;">

  <%= f.fields_for :event_times, @event.event_times.sort_by(&:day_of_event_index) do |event_time_form| %>
    <% event_time = event_time_form.object %>
    <div class="row event_time_inputs mb-3">
      <div class="col-4">
        <label for="event_<%= event_time.day_of_week.downcase %>_start_time">
          <%= lakes_of_fire_date(event_time.day_of_week).strftime("%A - %-m/%-d") %>
          <%= event_time_form.hidden_field :day_of_week, class: "day_of_week_input" %>
        </label>
      </div>
      <div class="col-4">
        <%= event_time_form.text_field  :starting,
                                        class: "form-control time start #{event_time_form.object.day_of_week.downcase}",
                                        placeholder: "Starting time",
                                        date_pair_value: event_time_form.object.start_time %>

        <div class="form-check mt-1">
          <input type="checkbox" class="all_day_event form-check-input" value="value" id="multiple_all_day_event_<%= event_time_form.index %>">
          <label class="form-check-label" for="multiple_all_day_event_<%= event_time_form.index %>">All Day</label>
        </div>

      </div>
      <div class="col-4">
        <%= event_time_form.hidden_field :end_time %>
        <%= event_time_form.text_field  :ending,
                                        class: "form-control time end #{event_time_form.object.day_of_week.downcase}",
                                        placeholder: "Ending time",
                                        date_pair_value: event_time_form.object.end_time %>
      </div>
    </div>
  <% end %>

</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const singleRecurrenceRadio = document.getElementById('event_event_recurrence_single_val');
  const multipleRecurrenceRadio = document.getElementById('event_event_recurrence_multiple_val');
  const singleOccurrenceDiv = document.getElementById('single_occurrance_event');
  const multipleOccurrenceDiv = document.getElementById('multiple_occurrance_event');

  function toggleRecurrenceSections() {
    if (!singleRecurrenceRadio || !multipleRecurrenceRadio || !singleOccurrenceDiv || !multipleOccurrenceDiv) {
      return;
    }

    if (singleRecurrenceRadio.checked) {
      singleOccurrenceDiv.style.display = 'block';
      multipleOccurrenceDiv.style.display = 'none';
    } else if (multipleRecurrenceRadio.checked) {
      singleOccurrenceDiv.style.display = 'none';
      multipleOccurrenceDiv.style.display = 'block';
    } else {
      singleOccurrenceDiv.style.display = 'none';
      multipleOccurrenceDiv.style.display = 'none';
    }
  }

  if (singleRecurrenceRadio && multipleRecurrenceRadio) {
    singleRecurrenceRadio.addEventListener('change', toggleRecurrenceSections);
    multipleRecurrenceRadio.addEventListener('change', toggleRecurrenceSections);
    toggleRecurrenceSections(); // Initial check
  }
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const whoCampRadio = document.getElementById('event_who_radio_camp');
  const whoJustMeRadio = document.getElementById('event_who_just_me');
  const whoLakesOfFireRadio = document.getElementById('event_who_lakes_of_fire');
  
  const whoCampDiv = document.getElementById('who_camp_event');
  const whoLakesOfFireDiv = document.getElementById('who_lakes_of_fire_event');

  // Get references to the input fields
  const whoCampNameInput = document.getElementById('event_who_camp_input');
  const whoDepartmentInput = document.getElementById('event_department_id_input');

  function toggleWhoSections() {
    if (!whoCampRadio || !whoJustMeRadio || !whoLakesOfFireRadio || !whoCampDiv || !whoLakesOfFireDiv || !whoCampNameInput || !whoDepartmentInput) {
      return;
    }

    if (whoCampRadio.checked) {
      whoCampDiv.style.display = 'block';
      whoLakesOfFireDiv.style.display = 'none';
      if (whoDepartmentInput) whoDepartmentInput.value = ''; // Clear other input
    } else if (whoLakesOfFireRadio.checked) {
      whoCampDiv.style.display = 'none';
      if (whoCampNameInput) whoCampNameInput.value = ''; // Clear other input
      whoLakesOfFireDiv.style.display = 'block';
    } else { // Covers whoJustMeRadio.checked or if none are checked initially
      whoCampDiv.style.display = 'none';
      if (whoCampNameInput) whoCampNameInput.value = '';
      whoLakesOfFireDiv.style.display = 'none';
      if (whoDepartmentInput) whoDepartmentInput.value = '';
    }
  }

  if (whoCampRadio && whoJustMeRadio && whoLakesOfFireRadio) {
    whoCampRadio.addEventListener('change', toggleWhoSections);
    whoJustMeRadio.addEventListener('change', toggleWhoSections);
    whoLakesOfFireRadio.addEventListener('change', toggleWhoSections);
    
    toggleWhoSections(); // Initial check
  }
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const whereCampRadio = document.getElementById('event_where_radio_camp');
  const whereLocationRadio = document.getElementById('event_where_location_val');
  const whereMultipleLocationsRadio = document.getElementById('event_where_multiple_locations');
  
  const whereCampDiv = document.getElementById('where_camp_event');
  const whereLocationDiv = document.getElementById('where_location_event');
  const whereImpreciseDiv = document.getElementById('where_imprecise_event');

  // Get references to the input fields
  const whereCampInput = document.getElementById('event_where_camp_input');
  const whereLocationInput = document.getElementById('event_where_location_input');
  const whereImpreciseInput = document.getElementById('event_where_imprecise_input');

  function toggleWhereSections() {
    if (!whereCampRadio || !whereLocationRadio || !whereMultipleLocationsRadio || 
        !whereCampDiv || !whereLocationDiv || !whereImpreciseDiv || 
        !whereCampInput || !whereLocationInput || !whereImpreciseInput) {
      return;
    }

    if (whereCampRadio.checked) {
      whereCampDiv.style.display = 'block';
      whereLocationDiv.style.display = 'none';
      if (whereLocationInput) whereLocationInput.value = '';
      whereImpreciseDiv.style.display = 'none';
      if (whereImpreciseInput) whereImpreciseInput.value = '';
    } else if (whereLocationRadio.checked) {
      whereCampDiv.style.display = 'none';
      if (whereCampInput) whereCampInput.value = '';
      whereLocationDiv.style.display = 'block';
      whereImpreciseDiv.style.display = 'none';
      if (whereImpreciseInput) whereImpreciseInput.value = '';
    } else if (whereMultipleLocationsRadio.checked) {
      whereCampDiv.style.display = 'none';
      if (whereCampInput) whereCampInput.value = '';
      whereLocationDiv.style.display = 'none';
      if (whereLocationInput) whereLocationInput.value = '';
      whereImpreciseDiv.style.display = 'block';
    } else {
      whereCampDiv.style.display = 'none';
      if (whereCampInput) whereCampInput.value = '';
      whereLocationDiv.style.display = 'none';
      if (whereLocationInput) whereLocationInput.value = '';
      whereImpreciseDiv.style.display = 'none';
      if (whereImpreciseInput) whereImpreciseInput.value = '';
    }
  }

  if (whereCampRadio && whereLocationRadio && whereMultipleLocationsRadio) {
    whereCampRadio.addEventListener('change', toggleWhereSections);
    whereLocationRadio.addEventListener('change', toggleWhereSections);
    whereMultipleLocationsRadio.addEventListener('change', toggleWhereSections);
    
    toggleWhereSections(); // Initial check
  }
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const whereCampTextInput = document.getElementById('event_where_camp_input');
  const whereCampIdHiddenInput = document.getElementById('event_where_camp_id_input');
  const autocompleteDropdown = document.getElementById('where_camp_autocomplete_list');

  let campsData = <%= @camps_for_autocomplete.to_json.html_safe %>;

  if (whereCampTextInput && whereCampIdHiddenInput && autocompleteDropdown) {

    whereCampTextInput.addEventListener('input', function(e) {
      const inputValue = e.target.value.toLowerCase();
      autocompleteDropdown.innerHTML = ''; 
      whereCampIdHiddenInput.value = ''; 

      if (inputValue.length === 0) {
        autocompleteDropdown.style.display = 'none';
        return;
      }

      const filteredCamps = campsData.filter(camp =>
        camp.name.toLowerCase().includes(inputValue)
      );

      if (filteredCamps.length > 0) {
        filteredCamps.forEach(camp => {
          const item = document.createElement('a');
          item.classList.add('list-group-item', 'list-group-item-action');
          item.href = "#";
          item.textContent = camp.name;
          item.setAttribute('data-camp-id', camp.id);
          item.addEventListener('click', function(event) {
            event.preventDefault();
            whereCampTextInput.value = camp.name;
            whereCampIdHiddenInput.value = camp.id;
            autocompleteDropdown.innerHTML = '';
            autocompleteDropdown.style.display = 'none';
          });
          autocompleteDropdown.appendChild(item);
        });
        autocompleteDropdown.style.display = 'block';
      } else {
        autocompleteDropdown.style.display = 'none';
      }
    });

    whereCampTextInput.addEventListener('blur', function(e) {
      // Small delay to allow click event on dropdown to fire first
      setTimeout(() => {
        if (!autocompleteDropdown.matches(':hover')) { // Check if mouse is not over the dropdown
            autocompleteDropdown.style.display = 'none';
        }
      }, 150);
    });

    // Optional: handle Enter key to select first item if any, or Tab to auto-select if one match
    // This part can be complex and is omitted for brevity but can be added if needed.
  }
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const whereLocationTextInput = document.getElementById('event_where_location_input');
  const whereLocationIdHiddenInput = document.getElementById('event_where_location_id_input');
  const autocompleteDropdown = document.getElementById('where_location_autocomplete_list');

  let locationsData = <%= @locations_for_autocomplete.to_json.html_safe %>;

  if (whereLocationTextInput && whereLocationIdHiddenInput && autocompleteDropdown) {

    whereLocationTextInput.addEventListener('input', function(e) {
      const inputValue = e.target.value.toLowerCase();
      autocompleteDropdown.innerHTML = ''; 
      whereLocationIdHiddenInput.value = ''; 

      if (inputValue.length === 0) {
        autocompleteDropdown.style.display = 'none';
        return;
      }

      const filteredLocations = locationsData.filter(location =>
        location.name.toLowerCase().includes(inputValue)
      );

      if (filteredLocations.length > 0) {
        filteredLocations.forEach(location => {
          const item = document.createElement('a');
          item.classList.add('list-group-item', 'list-group-item-action');
          item.href = "#";
          item.textContent = location.name;
          item.setAttribute('data-location-id', location.id);
          item.addEventListener('click', function(event) {
            event.preventDefault();
            whereLocationTextInput.value = location.name;
            whereLocationIdHiddenInput.value = location.id;
            autocompleteDropdown.innerHTML = '';
            autocompleteDropdown.style.display = 'none';
          });
          autocompleteDropdown.appendChild(item);
        });
        autocompleteDropdown.style.display = 'block';
      } else {
        autocompleteDropdown.style.display = 'none';
      }
    });

    whereLocationTextInput.addEventListener('blur', function(e) {
      // Small delay to allow click event on dropdown to fire first
      setTimeout(() => {
        if (!autocompleteDropdown.matches(':hover')) { // Check if mouse is not over the dropdown
            autocompleteDropdown.style.display = 'none';
        }
      }, 150);
    });
  }
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const whereImpreciseTextInput = document.getElementById('event_where_imprecise_input');
  const whereLocationIdHiddenInput = document.getElementById('event_where_location_id_input');
  const autocompleteDropdown = document.getElementById('where_imprecise_autocomplete_list');

  let impreciseLocationsData = <%= @imprecise_locations_for_autocomplete.to_json.html_safe %>;

  if (whereImpreciseTextInput && whereLocationIdHiddenInput && autocompleteDropdown) {

    whereImpreciseTextInput.addEventListener('input', function(e) {
      const inputValue = e.target.value.toLowerCase();
      autocompleteDropdown.innerHTML = ''; 
      whereLocationIdHiddenInput.value = ''; 

      if (inputValue.length === 0) {
        autocompleteDropdown.style.display = 'none';
        return;
      }

      const filteredLocations = impreciseLocationsData.filter(location =>
        location.name.toLowerCase().includes(inputValue)
      );

      if (filteredLocations.length > 0) {
        filteredLocations.forEach(location => {
          const item = document.createElement('a');
          item.classList.add('list-group-item', 'list-group-item-action');
          item.href = "#";
          item.textContent = location.name;
          item.setAttribute('data-location-id', location.id);
          item.addEventListener('click', function(event) {
            event.preventDefault();
            whereImpreciseTextInput.value = location.name;
            whereLocationIdHiddenInput.value = location.id;
            autocompleteDropdown.innerHTML = '';
            autocompleteDropdown.style.display = 'none';
          });
          autocompleteDropdown.appendChild(item);
        });
        autocompleteDropdown.style.display = 'block';
      } else {
        autocompleteDropdown.style.display = 'none';
      }
    });

    whereImpreciseTextInput.addEventListener('blur', function(e) {
      // Small delay to allow click event on dropdown to fire first
      setTimeout(() => {
        if (!autocompleteDropdown.matches(':hover')) { // Check if mouse is not over the dropdown
            autocompleteDropdown.style.display = 'none';
        }
      }, 150);
    });
  }
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const whoCampTextInput = document.getElementById('event_who_camp_input');
  const hostingCampIdHiddenInput = document.getElementById('event_hosting_camp_id_input');
  const autocompleteDropdown = document.getElementById('who_camp_autocomplete_list');

  let campsData = <%= @camps_for_autocomplete.to_json.html_safe %>;
  
  if (whoCampTextInput && hostingCampIdHiddenInput && autocompleteDropdown) {

    whoCampTextInput.addEventListener('input', function(e) {
      const inputValue = e.target.value.toLowerCase();
      autocompleteDropdown.innerHTML = ''; 
      hostingCampIdHiddenInput.value = ''; 

      if (inputValue.length === 0) {
        autocompleteDropdown.style.display = 'none';
        return;
      }

      const filteredCamps = campsData.filter(camp =>
        camp.name.toLowerCase().includes(inputValue)
      );

      if (filteredCamps.length > 0) {
        filteredCamps.forEach(camp => {
          const item = document.createElement('a');
          item.classList.add('list-group-item', 'list-group-item-action');
          item.href = "#";
          item.textContent = camp.name;
          item.setAttribute('data-camp-id', camp.id);
          item.addEventListener('click', function(event) {
            event.preventDefault();
            whoCampTextInput.value = camp.name;
            hostingCampIdHiddenInput.value = camp.id;
            autocompleteDropdown.innerHTML = '';
            autocompleteDropdown.style.display = 'none';
          });
          autocompleteDropdown.appendChild(item);
        });
        autocompleteDropdown.style.display = 'block';
      } else {
        autocompleteDropdown.style.display = 'none';
      }
    });

    whoCampTextInput.addEventListener('blur', function(e) {
      // Small delay to allow click event on dropdown to fire first
      setTimeout(() => {
        if (!autocompleteDropdown.matches(':hover')) { // Check if mouse is not over the dropdown
            autocompleteDropdown.style.display = 'none';
        }
      }, 150);
    });
  }
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const whoDepartmentTextInput = document.getElementById('event_who_department_input');
  const departmentIdHiddenInput = document.getElementById('event_department_id_input');
  const autocompleteDropdown = document.getElementById('who_department_autocomplete_list');

  let departmentsData = <%= @departments_for_autocomplete.to_json.html_safe %>;
  
  if (whoDepartmentTextInput && departmentIdHiddenInput && autocompleteDropdown) {

    whoDepartmentTextInput.addEventListener('input', function(e) {
      const inputValue = e.target.value.toLowerCase();
      autocompleteDropdown.innerHTML = ''; 
      departmentIdHiddenInput.value = ''; 

      if (inputValue.length === 0) {
        autocompleteDropdown.style.display = 'none';
        return;
      }

      const filteredDepartments = departmentsData.filter(department =>
        department.name.toLowerCase().includes(inputValue)
      );

      if (filteredDepartments.length > 0) {
        filteredDepartments.forEach(department => {
          const item = document.createElement('a');
          item.classList.add('list-group-item', 'list-group-item-action');
          item.href = "#";
          item.textContent = department.name;
          item.setAttribute('data-department-id', department.id);
          item.addEventListener('click', function(event) {
            event.preventDefault();
            whoDepartmentTextInput.value = department.name;
            departmentIdHiddenInput.value = department.id;
            autocompleteDropdown.innerHTML = '';
            autocompleteDropdown.style.display = 'none';
          });
          autocompleteDropdown.appendChild(item);
        });
        autocompleteDropdown.style.display = 'block';
      } else {
        autocompleteDropdown.style.display = 'none';
      }
    });

    whoDepartmentTextInput.addEventListener('blur', function(e) {
      // Small delay to allow click event on dropdown to fire first
      setTimeout(() => {
        if (!autocompleteDropdown.matches(':hover')) { // Check if mouse is not over the dropdown
            autocompleteDropdown.style.display = 'none';
        }
      }, 150);
    });
  }
});
</script>
